syntax="proto3";

package project;

option go_package="./pb";

import "google/protobuf/empty.proto";

service ProjectService {
    rpc CreateGig(CreateGigRequest) returns (google.protobuf.Empty);
    rpc UpdateGig(GigResponse) returns (google.protobuf.Empty);
    rpc GetGig(GetById) returns (GigResponse);
    rpc GetAllFreelancerGigs(GetByUserId) returns (stream GigResponse);
    rpc GiveAccessToPrivateGigs(GiveAccessRequest) returns (google.protobuf.Empty);
    rpc RemoveAccessToPrivateGigs(GiveAccessRequest) returns (google.protobuf.Empty);
    rpc ShowIntrest(IntrestRequest) returns (google.protobuf.Empty);
    rpc GetAllIntrest(GetAllIntrestRequest) returns (stream IntrestResponse);
    rpc FreelancerProjectAcknowledgment(ProjectAcknowledgmentRequest) returns (google.protobuf.Empty);

    rpc AddPackageType(AddPackageTypeRequest) returns (google.protobuf.Empty);
    rpc EditPackageType(PackageTypeResponse) returns (google.protobuf.Empty);
    rpc GetPackageType(google.protobuf.Empty) returns (stream PackageTypeResponse);

    rpc ClientAddRequest(AddClientGigRequest) returns (google.protobuf.Empty);
    rpc ClientUpdateRequest(ClientRequestResponse) returns (google.protobuf.Empty);
    rpc GetClientRequest(GetById) returns (ClientRequestResponse);
    rpc GetAllClientRequest(RequestFilterQuery) returns (stream ClientRequestResponse);
    rpc ClientIntrestAcknowledgment(IntrestAcknowledgmentRequest) returns (google.protobuf.Empty);
    rpc CreateProject(ProjectRequest) returns (ProjectResponse);
    rpc UpdateProject(ProjectResponse) returns (google.protobuf.Empty);
    rpc GetProject(GetProjectById) returns (ProjectResponse);
    rpc GetAllProjects(GigFilterQuery) returns (stream ProjectResponse);
    rpc RemoveProject(GetProjectById) returns (google.protobuf.Empty);
    rpc FreelancerUpdateProjectStatus(UpdateProjectStatusRequest) returns (google.protobuf.Empty);
    rpc FreelancerProjectManagement(ManagementRequest) returns (google.protobuf.Empty);
    rpc FreelancerModuleUpdation(ModuleUpdation) returns (google.protobuf.Empty);
    rpc GetProjectManagement(GetProjectById) returns (ProjectManagementResponse);
    rpc FreelancerUploadFile(FileRequest) returns (FileResponse);
    rpc ClientGetFile(GetProjectById) returns (FileResponse);
    rpc FreelancerGetFile(GetProjectById) returns (FileResponse);


    rpc GetAllGigs(GigFilterQuery) returns (stream GigResponse);
    rpc GetAllClientRequestForFreelancers(RequestFilterQuery) returns (stream ClientRequestResponse);
}

message CreateGigRequest {
    string title = 1;
    string freelancerId = 2;
    int32 categoryId = 3;
    int32 skillId = 4;
    string description = 5;
    int32 packageTypeId = 6;
    float price = 7;
    string delivaryDays = 8;
    bool isPrivate = 9;
}
message GigResponse {
    string id = 1;
    string title = 2;
    string freelancerId = 3;
    int32 categoryId = 4;
    int32 skillId = 5;
    string description = 6;
    int32 packageTypeId = 7;
    float price = 8;
    string delivaryDays = 9;
    repeated string images = 10;
    bool isPrivate = 11;
}
message GetById {
    string id = 1;
}
message GetByUserId {
    string id = 1;
}
message AddPackageTypeRequest {
    string packageType = 1;
}
message PackageTypeResponse {
    int32 id = 1;
    string packageType = 2;
}
message PackageTypeId {
    int32 id = 1;
}
message AddClientGigRequest {
    string clientId = 1;
    string title = 2;
    int32 categoryId = 3;
    int32 skillId = 4;
    float price = 5;
    string description = 6;
    string deliveryDate = 7;
}
message ClientRequestResponse {
    string id = 1;
    string clientId = 2;
    string title = 3;
    int32 categoryId = 4;
    int32 skillId = 5;
    float price = 6;
    string description = 7;
    string deliveryDate = 8;
    repeated string images = 9;
}
message IntrestRequest {
    string userId = 1;
    string requestId = 2;
    string gigId = 3;
}
message GetAllIntrestRequest {
    string requestId = 1;
    string userId = 2;
}
message IntrestResponse {
    string id = 1;
    string userId = 2;
    string name = 3;
    string requestId = 4;
    string gigId = 5;
}
message IntrestAcknowledgmentRequest {
    string intrestId = 1;
    string userId = 2;
}
message GigFilterQuery {
    int32 page = 1;
    int32 limit = 2;
    string query = 3;
    string filter = 4;
    string sortBy = 5;
    bool sortDesc = 6;
}
message RequestFilterQuery {
    string userId = 1;
    int32 page = 2;
    int32 limit = 3;
    string query = 4;
    string filter = 5;
    string sortBy = 6;
    bool sortDesc = 7;
}
message ProjectRequest {
    string clientId = 1;
    string freelancerId = 2;
    string gigId = 3;
    string endDate = 4;
}
message ProjectResponse {
    string id = 1;
    string clientId = 2;
    string freelancerId = 3;
    string gigId = 4;
    string startDate = 5;
    string endDate = 6;
    string status = 7;
}
message GetProjectById {
    string id = 1;
    string userId = 2;
}
message UpdateProjectStatusRequest {
    string userId = 1;
    string projectId = 2;
    string status = 3;
}
message ProjectAcknowledgmentRequest {
    string projectId = 1;
    string freelancerId = 2;
    bool isAcknowledged = 3;
}
message FileRequest {
    string objectName = 1;
    string filePath = 2;
    bytes imageData = 3;
    string userId = 4;
    string projectId = 5;
}
message FileResponse {
    string url = 1;
}
message GiveAccessRequest {
    string gigId = 1;
    string userId = 2;
}
message ManagementRequest {
    string projectid = 1;
    bool isManagementNeeded = 2;
    int32 moduleNumber = 3;
    repeated Module moduleDetails = 4;
    string userId = 5;
}
message Module {
    string id = 1;
    string moduleName = 2;
    string description = 3;
    int32 status = 4;
}
message ModuleUpdation {
    string projectId = 1;
    string moduleId = 2;
    int32 status = 3;
    string userId = 4;
}
message ProjectManagementResponse {
    string projectId = 1;
    string managementId = 2;
    int32 moduleNumber = 3;
    repeated Module moduleDetails = 4;
}